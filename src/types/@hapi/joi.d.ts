export = index;
declare const index: {
    allow: Function;
    alt: Function;
    alternatives: Function;
    any: Function;
    applyFunctionToChildren: Function;
    array: Function;
    assert: Function;
    attempt: Function;
    binary: Function;
    bind: Function;
    bool: Function;
    boolean: Function;
    checkOptions: Function;
    clone: Function;
    compile: Function;
    concat: Function;
    createError: Function;
    createOverrideError: Function;
    date: Function;
    default: Function;
    defaults: Function;
    describe: Function;
    description: Function;
    disallow: Function;
    empty: Function;
    equal: Function;
    error: Function;
    example: Function;
    exist: Function;
    extend: Function;
    extensionSchema: {
        allow: Function;
        and: Function;
        append: Function;
        applyFunctionToChildren: Function;
        assert: Function;
        checkOptions: Function;
        clone: Function;
        concat: Function;
        createError: Function;
        createOverrideError: Function;
        default: Function;
        describe: Function;
        description: Function;
        disallow: Function;
        empty: Function;
        equal: Function;
        error: Function;
        example: Function;
        exist: Function;
        forbidden: Function;
        forbiddenKeys: Function;
        invalid: Function;
        isImmutable: boolean;
        isJoi: boolean;
        keys: Function;
        label: Function;
        length: Function;
        max: Function;
        meta: Function;
        min: Function;
        nand: Function;
        not: Function;
        notes: Function;
        only: Function;
        optional: Function;
        optionalKeys: Function;
        options: Function;
        or: Function;
        oxor: Function;
        pattern: Function;
        raw: Function;
        rename: Function;
        required: Function;
        requiredKeys: Function;
        schema: Function;
        schemaType: any;
        strict: Function;
        strip: Function;
        tags: Function;
        type: Function;
        unit: Function;
        unknown: Function;
        valid: Function;
        validate: Function;
        when: Function;
        with: Function;
        without: Function;
        xor: Function;
    };
    extensionsSchema: {
        allow: Function;
        applyFunctionToChildren: Function;
        checkOptions: Function;
        clone: Function;
        concat: Function;
        createError: Function;
        createOverrideError: Function;
        default: Function;
        describe: Function;
        description: Function;
        disallow: Function;
        empty: Function;
        equal: Function;
        error: Function;
        example: Function;
        exist: Function;
        forbidden: Function;
        has: Function;
        invalid: Function;
        isImmutable: boolean;
        isJoi: boolean;
        items: Function;
        label: Function;
        length: Function;
        max: Function;
        meta: Function;
        min: Function;
        not: Function;
        notes: Function;
        only: Function;
        optional: Function;
        options: Function;
        ordered: Function;
        raw: Function;
        required: Function;
        schemaType: any;
        single: Function;
        sparse: Function;
        strict: Function;
        strip: Function;
        tags: Function;
        unique: Function;
        unit: Function;
        valid: Function;
        validate: Function;
        when: Function;
    };
    forbidden: Function;
    func: Function;
    invalid: Function;
    isImmutable: boolean;
    isJoi: boolean;
    isRef: Function;
    label: Function;
    lazy: Function;
    meta: Function;
    not: Function;
    notes: Function;
    number: Function;
    object: Function;
    only: Function;
    optional: Function;
    options: Function;
    raw: Function;
    reach: Function;
    ref: Function;
    required: Function;
    schemaType: any;
    strict: Function;
    string: Function;
    strip: Function;
    symbol: Function;
    tags: Function;
    unit: Function;
    valid: Function;
    validate: Function;
    version: string;
    when: Function;
};
